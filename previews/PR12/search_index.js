var documenterSearchIndex = {"docs":
[{"location":"license/","page":"License","title":"License","text":"EditURL = \"https://github.com/sloede/OpenFHE/blob/main/LICENSE.md\"","category":"page"},{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2023 Michael Schlottke-LakemperPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"reference/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"reference/","page":"API reference","title":"API reference","text":"CurrentModule = OpenFHE","category":"page"},{"location":"reference/","page":"API reference","title":"API reference","text":"Modules = [OpenFHE]","category":"page"},{"location":"reference/#OpenFHE.CCParams","page":"API reference","title":"OpenFHE.CCParams","text":"CCParams{CryptoContextCKKSRNS}()\n\nCreate a new CCParams object to store parameters for CKKS-encrypted operations.\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.Plaintext","page":"API reference","title":"OpenFHE.Plaintext","text":"Plaintext()\n\nCreate an empty Plaintext object without any encoded data.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetMultiplicativeDepth","page":"API reference","title":"OpenFHE.SetMultiplicativeDepth","text":"SetMultiplicativeDepth(parameters::CCParams, depth::Integer)\n\nSet multiplicative depth for a given set of parameters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.library_path-Tuple{}","page":"API reference","title":"OpenFHE.library_path","text":"OpenFHE.library_path()\n\nReturn the path of the OpenFHE-julia library that is used.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.set_library!","page":"API reference","title":"OpenFHE.set_library!","text":"OpenFHE.set_library!(path = nothing; force = true)\n\nSet the absolute path to a system-provided OpenFHE-julia installation, e.g., something like /path/to/libopenfhe_julia.<ext>, where <ext> is so on Linux,dylibon macOS, anddllon Windows. Restart the Julia session after executing this function such that the changes take effect. Usingnothing` as the path will revert the library path to the default settings, i.e., the JLL-provided version of OpenFHE-julia will be used.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"EditURL = \"https://github.com/sloede/OpenFHE.jl/blob/main/README.md\"","category":"page"},{"location":"#OpenFHE.jl","page":"Home","title":"OpenFHE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Docs-stable) (Image: Docs-dev) (Image: Build Status) (Image: Coveralls) (Image: Codecov) (Image: License: MIT) (Image: DOI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"OpenFHE.jl is a Julia wrapper package for OpenFHE, a C++ library for fully homomorphic encryption. The C++ functionality is exposed in native Julia via the CxxWrap.jl package, using OpenFHE-julia as its backend.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have not yet installed Julia, please follow the instructions for your operating system. OpenFHE.jl works with Julia v1.8 and later.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since it is a registered Julia package, you can install OpenFHE.jl by executing the following commands in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg; Pkg.add(\"OpenFHE\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Internally, OpenFHE.jl relies on OpenFHE-julia to provide bindings for the C++ library OpenFHE. Precompiled binares for OpenFHE-julia and OpenFHE are automatically for your platform when you install OpenFHE.jl, thus there is no need to compile anything manually.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The easiest way to get started is to run one of the examples from the examples directory by includeing them in Julia, e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using OpenFHE\n\njulia> include(joinpath(pkgdir(OpenFHE), \"examples\", \"simple_real_numbers.jl\"))\nCKKS scheme is using ring dimension 16384\n\nInput x1: (0.25, 0.5, 0.75, 1, 2, 3, 4, 5,  ... ); Estimated precision: 50 bits\n\nInput x2: (5, 4, 3, 2, 1, 0.75, 0.5, 0.25,  ... ); Estimated precision: 50 bits\n\n\nResults of homomorphic computations:\nx1 = (0.25, 0.5, 0.75, 1, 2, 3, 4, 5,  ... ); Estimated precision: 43 bits\nEstimated precision in bits: 43.0\nx1 + x2 = (5.25, 4.5, 3.75, 3, 3, 3.75, 4.5, 5.25,  ... ); Estimated precision: 43 bits\nEstimated precision in bits: 43.0\nx1 - x2 = (-4.75, -3.5, -2.25, -1, 1, 2.25, 3.5, 4.75,  ... ); Estimated precision: 43 bits\n\n4 * x1 = (1, 2, 3, 4, 8, 12, 16, 20,  ... ); Estimated precision: 41 bits\n\nx1 * x2 = (1.25, 2, 2.25, 2, 2, 2.25, 2, 1.25,  ... ); Estimated precision: 41 bits\n\n\nIn rotations, very small outputs (~10^-10 here) correspond to 0's:\nx1 rotate by 1 = (0.5, 0.75, 1, 2, 3, 4, 5, 0.25,  ... ); Estimated precision: 43 bits\n\nx1 rotate by -2 = (4, 5, 0.25, 0.5, 0.75, 1, 2, 3,  ... ); Estimated precision: 43 bits","category":"page"},{"location":"#Using-a-custom-OpenFHE-julia-library","page":"Home","title":"Using a custom OpenFHE-julia library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"By default, OpenFHE.jl uses the OpenFHE-julia library provided by the openfhe_julia_jll.jl package, which is automatically obtained when installing OpenFHE.jl. Someimtes, however, it might be beneficial to instead use a system-provided OpenFHE-julia library, e.g., for development or performance purposes. You can change the default by providing a different library with the OpenFHE.set_library! function, i.e., by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using OpenFHE\n\njulia> OpenFHE.set_library!(\"/abs/path/to/library.so\")\n[ Info: Please restart Julia and reload OpenFHE.jl for the library changes to take effect","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will create a LocalPreferences.toml file in your current project directory with the libopenfhe_julia preference set accordingly. As advised, you need to restart Julia for the change to take effect. By calling set_library!() without an argument, you revert to using JLL-provided library again.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In case the custom library has been deleted, loading OpenFHE.jl will fail. In that case, either remove the LocalPreferences.toml file or manually reset the preferences by executing","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using UUIDs, Preferences\n\njulia> delete_preferences!(UUID(\"77ce9b8e-ecf5-45d1-bd8a-d31f384f2f95\"), # UUID of OpenFHE.jl\n                           \"libopenfhe_julia\"; force = true)","category":"page"},{"location":"#Referencing","page":"Home","title":"Referencing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use OpenFHE.jl in your own research, please cite this repository as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{schlottkelakemper2024openfhejulia,\n  title={{O}pen{FHE}.jl: {F}ully homomorphic encryption in {J}ulia using {O}pen{FHE}},\n  author={Schlottke-Lakemper, Michael},\n  year={2024},\n  howpublished={\\url{https://github.com/sloede/OpenFHE.jl}},\n  doi={10.5281/zenodo.10460452}\n}","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpenFHE.jl was initiated by Michael Schlottke-Lakemper (RWTH Aachen University/High-Performance Computing Center Stuttgart (HLRS), Germany), who is also its principal maintainer.","category":"page"},{"location":"#License-and-contributing","page":"Home","title":"License and contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpenFHE.jl is available under the MIT license (see License). OpenFHE itself is available under the BSD 2-Clause license.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contributions by the community are very welcome! A good start would be to compare the examples folder in OpenFHE.jl (link) and in OpenFHE (link) and to port a missing example file to OpenFHE.jl. In case some OpenFHE functionality is not yet exposed by OpenFHE-julia, it would have to be added there first.","category":"page"}]
}
