var documenterSearchIndex = {"docs":
[{"location":"license/","page":"License","title":"License","text":"EditURL = \"https://github.com/sloede/OpenFHE/blob/main/LICENSE.md\"","category":"page"},{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2023 Michael Schlottke-LakemperPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"reference/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"reference/","page":"API reference","title":"API reference","text":"Note that most types and functions provided by OpenFHE.jl are generated automatically by CxxWrap.jl's @wrapmodule macro. Therefore, docstrings are attached to just the respective symbol and not the actual code location. The goal of this reference is thus chiefly to save the user/developer the hassle of having to go to the (authoritative) OpenFHE documentation each time they need to use OpenFHE.jl in Julia. Note that the documented types for function arguments are not necessarily identical to those imposed by the Julia code, but chosen to be more descriptive. For example, functions expecting enum arguments often allow any Integer value to be passed, but we document the function signature with the enum type instead.","category":"page"},{"location":"reference/","page":"API reference","title":"API reference","text":"If in doubt, please consult the official OpenFHE documentation.","category":"page"},{"location":"reference/","page":"API reference","title":"API reference","text":"note: Dereferencing shared pointer objects\nSometimes OpenFHE functions do not directly return wrapped C++ objects but (wrapped) shared pointers to those objects. This is indicated by a SharedPtr or SharedPtrAllocated in the type signature. To access the underlying object, use the dereferencing operator [].To avoid the hassle of having to dereference shared pointer objects when calling their member functions (which in Julia requires passing the object as the first argument), many functions have a method that automatically dereference the shared pointer, e.g., all CryptoContext member functions such as GetRingDimension or MakeCKKSPackedPlaintext.","category":"page"},{"location":"reference/","page":"API reference","title":"API reference","text":"CurrentModule = OpenFHE","category":"page"},{"location":"reference/","page":"API reference","title":"API reference","text":"Modules = [OpenFHE]","category":"page"},{"location":"reference/#OpenFHE.ADVANCEDSHE","page":"API reference","title":"OpenFHE.ADVANCEDSHE","text":"PKESchemeFeature\n\nEnum type for selecting scheme features for public key encryption (PKE) in a crypto context using Enable.\n\nInstances are:\n\nPKE\nKEYSWITCH\nPRE\nLEVELDSHE\nADVANCEDSHE\nMULTIPARTY\nFHE\nSCHEMESWITCH\n\nSee also: Enable\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.BV","page":"API reference","title":"OpenFHE.BV","text":"KeySwitchTechnique\n\nEnum type for selecting the key switching technique in a set of CCParams parameters using SetKeySwitchTechnique.\n\nInstances are:\n\nINVALID_KS_TECH\nBV\nHYBRID\n\nSee also: SetKeySwitchTechnique\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.FHE","page":"API reference","title":"OpenFHE.FHE","text":"PKESchemeFeature\n\nEnum type for selecting scheme features for public key encryption (PKE) in a crypto context using Enable.\n\nInstances are:\n\nPKE\nKEYSWITCH\nPRE\nLEVELDSHE\nADVANCEDSHE\nMULTIPARTY\nFHE\nSCHEMESWITCH\n\nSee also: Enable\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.FIXEDAUTO","page":"API reference","title":"OpenFHE.FIXEDAUTO","text":"ScalingTechnique\n\nEnum type for selecting the scaling technique for ciphertext multiplication in a set of CCParams parameters using SetScalingTechnique.\n\nInstances are:\n\nFIXEDMANUAL\nFIXEDAUTO\nFLEXIBLEAUTO\nFLEXIBLEAUTOEXT\nNORESCALE\nINVALID_RS_TECHNIQUE\n\nSee also: SetScalingTechnique\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.FIXEDMANUAL","page":"API reference","title":"OpenFHE.FIXEDMANUAL","text":"ScalingTechnique\n\nEnum type for selecting the scaling technique for ciphertext multiplication in a set of CCParams parameters using SetScalingTechnique.\n\nInstances are:\n\nFIXEDMANUAL\nFIXEDAUTO\nFLEXIBLEAUTO\nFLEXIBLEAUTOEXT\nNORESCALE\nINVALID_RS_TECHNIQUE\n\nSee also: SetScalingTechnique\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.FLEXIBLEAUTO","page":"API reference","title":"OpenFHE.FLEXIBLEAUTO","text":"ScalingTechnique\n\nEnum type for selecting the scaling technique for ciphertext multiplication in a set of CCParams parameters using SetScalingTechnique.\n\nInstances are:\n\nFIXEDMANUAL\nFIXEDAUTO\nFLEXIBLEAUTO\nFLEXIBLEAUTOEXT\nNORESCALE\nINVALID_RS_TECHNIQUE\n\nSee also: SetScalingTechnique\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.FLEXIBLEAUTOEXT","page":"API reference","title":"OpenFHE.FLEXIBLEAUTOEXT","text":"ScalingTechnique\n\nEnum type for selecting the scaling technique for ciphertext multiplication in a set of CCParams parameters using SetScalingTechnique.\n\nInstances are:\n\nFIXEDMANUAL\nFIXEDAUTO\nFLEXIBLEAUTO\nFLEXIBLEAUTOEXT\nNORESCALE\nINVALID_RS_TECHNIQUE\n\nSee also: SetScalingTechnique\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.GAUSSIAN","page":"API reference","title":"OpenFHE.GAUSSIAN","text":"SecretKeyDist\n\nEnum type for selecting the distribution from which the secret key is generated. To be used in a set of CCParams parameters using SetSecretKeyDist.\n\nInstances are:\n\nGAUSSIAN\nUNIFORM_TERNARY\nSPARSE_TERNARY\n\nSee also: SetSecretKeyDist\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.HEStd_128_classic","page":"API reference","title":"OpenFHE.HEStd_128_classic","text":"SecurityLevel Enum type for specifying the security level according to the homomorphic encryption standard in a set of CCParams parameters using SetSecurityLevel.\n\nInstances are:\n\nHEStd_128_classic\nHEStd_192_classic\nHEStd_256_classic\nHEStd_128_quantum\nHEStd_192_quantum\nHEStd_256_quantum\nHEStd_NotSet\n\nSee also: SetSecurityLevel\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.HEStd_128_quantum","page":"API reference","title":"OpenFHE.HEStd_128_quantum","text":"SecurityLevel Enum type for specifying the security level according to the homomorphic encryption standard in a set of CCParams parameters using SetSecurityLevel.\n\nInstances are:\n\nHEStd_128_classic\nHEStd_192_classic\nHEStd_256_classic\nHEStd_128_quantum\nHEStd_192_quantum\nHEStd_256_quantum\nHEStd_NotSet\n\nSee also: SetSecurityLevel\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.HEStd_192_classic","page":"API reference","title":"OpenFHE.HEStd_192_classic","text":"SecurityLevel Enum type for specifying the security level according to the homomorphic encryption standard in a set of CCParams parameters using SetSecurityLevel.\n\nInstances are:\n\nHEStd_128_classic\nHEStd_192_classic\nHEStd_256_classic\nHEStd_128_quantum\nHEStd_192_quantum\nHEStd_256_quantum\nHEStd_NotSet\n\nSee also: SetSecurityLevel\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.HEStd_192_quantum","page":"API reference","title":"OpenFHE.HEStd_192_quantum","text":"SecurityLevel Enum type for specifying the security level according to the homomorphic encryption standard in a set of CCParams parameters using SetSecurityLevel.\n\nInstances are:\n\nHEStd_128_classic\nHEStd_192_classic\nHEStd_256_classic\nHEStd_128_quantum\nHEStd_192_quantum\nHEStd_256_quantum\nHEStd_NotSet\n\nSee also: SetSecurityLevel\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.HEStd_256_classic","page":"API reference","title":"OpenFHE.HEStd_256_classic","text":"SecurityLevel Enum type for specifying the security level according to the homomorphic encryption standard in a set of CCParams parameters using SetSecurityLevel.\n\nInstances are:\n\nHEStd_128_classic\nHEStd_192_classic\nHEStd_256_classic\nHEStd_128_quantum\nHEStd_192_quantum\nHEStd_256_quantum\nHEStd_NotSet\n\nSee also: SetSecurityLevel\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.HEStd_256_quantum","page":"API reference","title":"OpenFHE.HEStd_256_quantum","text":"SecurityLevel Enum type for specifying the security level according to the homomorphic encryption standard in a set of CCParams parameters using SetSecurityLevel.\n\nInstances are:\n\nHEStd_128_classic\nHEStd_192_classic\nHEStd_256_classic\nHEStd_128_quantum\nHEStd_192_quantum\nHEStd_256_quantum\nHEStd_NotSet\n\nSee also: SetSecurityLevel\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.HEStd_NotSet","page":"API reference","title":"OpenFHE.HEStd_NotSet","text":"SecurityLevel Enum type for specifying the security level according to the homomorphic encryption standard in a set of CCParams parameters using SetSecurityLevel.\n\nInstances are:\n\nHEStd_128_classic\nHEStd_192_classic\nHEStd_256_classic\nHEStd_128_quantum\nHEStd_192_quantum\nHEStd_256_quantum\nHEStd_NotSet\n\nSee also: SetSecurityLevel\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.HYBRID","page":"API reference","title":"OpenFHE.HYBRID","text":"KeySwitchTechnique\n\nEnum type for selecting the key switching technique in a set of CCParams parameters using SetKeySwitchTechnique.\n\nInstances are:\n\nINVALID_KS_TECH\nBV\nHYBRID\n\nSee also: SetKeySwitchTechnique\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.INVALID_KS_TECH","page":"API reference","title":"OpenFHE.INVALID_KS_TECH","text":"KeySwitchTechnique\n\nEnum type for selecting the key switching technique in a set of CCParams parameters using SetKeySwitchTechnique.\n\nInstances are:\n\nINVALID_KS_TECH\nBV\nHYBRID\n\nSee also: SetKeySwitchTechnique\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.INVALID_RS_TECHNIQUE","page":"API reference","title":"OpenFHE.INVALID_RS_TECHNIQUE","text":"ScalingTechnique\n\nEnum type for selecting the scaling technique for ciphertext multiplication in a set of CCParams parameters using SetScalingTechnique.\n\nInstances are:\n\nFIXEDMANUAL\nFIXEDAUTO\nFLEXIBLEAUTO\nFLEXIBLEAUTOEXT\nNORESCALE\nINVALID_RS_TECHNIQUE\n\nSee also: SetScalingTechnique\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.KEYSWITCH","page":"API reference","title":"OpenFHE.KEYSWITCH","text":"PKESchemeFeature\n\nEnum type for selecting scheme features for public key encryption (PKE) in a crypto context using Enable.\n\nInstances are:\n\nPKE\nKEYSWITCH\nPRE\nLEVELDSHE\nADVANCEDSHE\nMULTIPARTY\nFHE\nSCHEMESWITCH\n\nSee also: Enable\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.LEVELEDSHE","page":"API reference","title":"OpenFHE.LEVELEDSHE","text":"PKESchemeFeature\n\nEnum type for selecting scheme features for public key encryption (PKE) in a crypto context using Enable.\n\nInstances are:\n\nPKE\nKEYSWITCH\nPRE\nLEVELDSHE\nADVANCEDSHE\nMULTIPARTY\nFHE\nSCHEMESWITCH\n\nSee also: Enable\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.MULTIPARTY","page":"API reference","title":"OpenFHE.MULTIPARTY","text":"PKESchemeFeature\n\nEnum type for selecting scheme features for public key encryption (PKE) in a crypto context using Enable.\n\nInstances are:\n\nPKE\nKEYSWITCH\nPRE\nLEVELDSHE\nADVANCEDSHE\nMULTIPARTY\nFHE\nSCHEMESWITCH\n\nSee also: Enable\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.NORESCALE","page":"API reference","title":"OpenFHE.NORESCALE","text":"ScalingTechnique\n\nEnum type for selecting the scaling technique for ciphertext multiplication in a set of CCParams parameters using SetScalingTechnique.\n\nInstances are:\n\nFIXEDMANUAL\nFIXEDAUTO\nFLEXIBLEAUTO\nFLEXIBLEAUTOEXT\nNORESCALE\nINVALID_RS_TECHNIQUE\n\nSee also: SetScalingTechnique\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.PKE","page":"API reference","title":"OpenFHE.PKE","text":"PKESchemeFeature\n\nEnum type for selecting scheme features for public key encryption (PKE) in a crypto context using Enable.\n\nInstances are:\n\nPKE\nKEYSWITCH\nPRE\nLEVELDSHE\nADVANCEDSHE\nMULTIPARTY\nFHE\nSCHEMESWITCH\n\nSee also: Enable\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.PRE","page":"API reference","title":"OpenFHE.PRE","text":"PKESchemeFeature\n\nEnum type for selecting scheme features for public key encryption (PKE) in a crypto context using Enable.\n\nInstances are:\n\nPKE\nKEYSWITCH\nPRE\nLEVELDSHE\nADVANCEDSHE\nMULTIPARTY\nFHE\nSCHEMESWITCH\n\nSee also: Enable\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.SCHEMESWITCH","page":"API reference","title":"OpenFHE.SCHEMESWITCH","text":"PKESchemeFeature\n\nEnum type for selecting scheme features for public key encryption (PKE) in a crypto context using Enable.\n\nInstances are:\n\nPKE\nKEYSWITCH\nPRE\nLEVELDSHE\nADVANCEDSHE\nMULTIPARTY\nFHE\nSCHEMESWITCH\n\nSee also: Enable\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.SPARSE_TERNARY","page":"API reference","title":"OpenFHE.SPARSE_TERNARY","text":"SecretKeyDist\n\nEnum type for selecting the distribution from which the secret key is generated. To be used in a set of CCParams parameters using SetSecretKeyDist.\n\nInstances are:\n\nGAUSSIAN\nUNIFORM_TERNARY\nSPARSE_TERNARY\n\nSee also: SetSecretKeyDist\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.UNIFORM_TERNARY","page":"API reference","title":"OpenFHE.UNIFORM_TERNARY","text":"SecretKeyDist\n\nEnum type for selecting the distribution from which the secret key is generated. To be used in a set of CCParams parameters using SetSecretKeyDist.\n\nInstances are:\n\nGAUSSIAN\nUNIFORM_TERNARY\nSPARSE_TERNARY\n\nSee also: SetSecretKeyDist\n\n\n\n\n\n","category":"constant"},{"location":"reference/#OpenFHE.CCParams","page":"API reference","title":"OpenFHE.CCParams","text":"CCParams{T}\n\nType to store parameters for a generating a cryptographic context in OpenFHE using GenCryptoContext.\n\nUse CCParams{CryptoContextCKKSRNS}() to create a parameter store that can be used to generate a cryptographic context for CKKS-encrypted operations.\n\nSee also: CryptoContextCKKSRNS, GenCryptoContext\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.Ciphertext","page":"API reference","title":"OpenFHE.Ciphertext","text":"Ciphertext{T}\n\nType alias for CxxWrap.StdLib.SharedPtr{CiphertextImpl{T}}.\n\nThe ciphertext object holds homomorphically encrypted data that can be used for encrypted computations. It is created either by encrypting a Plaintext object or by performing arithmetic with existing ciphertexts.\n\nSee also: Plaintext, Encrypt\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.CryptoContext","page":"API reference","title":"OpenFHE.CryptoContext","text":"CryptoContext{T}\n\nType alias for CxxWrap.StdLib.SharedPtr{CryptoContextImpl{T}}.\n\nThe crypto context is the central object in OpenFHE that facilitates all essential cryptographic operations such as key generation, encryption/decryption, arithmetic operations on plaintexts and ciphertexts etc.\n\nIn OpenFHE, a crypto context is always created from a set of CCParams parameters using GenCryptoContext.\n\nSee also: CCParams, GenCryptoContext\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.CryptoContextCKKSRNS","page":"API reference","title":"OpenFHE.CryptoContextCKKSRNS","text":"CryptoContextCKKSRNS\n\nA type used as a parameter to CCParams to indicate that parameters for CKKS-based encryptions are to be stored.\n\nSee also: CCParams\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.DCRTPoly","page":"API reference","title":"OpenFHE.DCRTPoly","text":"DCRTPoly\n\nA type used as a parameter for many parametric data types (e.g., CryptoContext or Ciphertext) to indicate how some fundamental lattice operations are encoded in OpenFHE. Usually this type never needs to be constructed directly by a user.\n\nSee also: CryptoContext\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.DecryptResult","page":"API reference","title":"OpenFHE.DecryptResult","text":"OpenFHE.DecryptResult\n\nReturn type of the Decrypt operation. This type does not actually hold any data but only information on whether the decryption succeeded. It is currently not used by OpenFHE.jl and no functions are implemented.\n\nSee also: Decrypt\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.KeyPair","page":"API reference","title":"OpenFHE.KeyPair","text":"KeyPair{T}\n\nData type to hold a public/private key combination for encrypting/decrypting data. A key pair is usually generated by calling KeyGen.\n\nnote: Note\nTo extract the public or private key from a key pair, use OpenFHE.public_key and OpenFHE.private_key respectively. Since these are not functions provided by OpenFHE but only by OpenFHE.jl, they are not exported.\n\nSee also: KeyGen, CryptoContext, PublicKey, PrivateKey, OpenFHE.public_key, OpenFHE.private_key\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.KeySwitchTechnique","page":"API reference","title":"OpenFHE.KeySwitchTechnique","text":"KeySwitchTechnique\n\nEnum type for selecting the key switching technique in a set of CCParams parameters using SetKeySwitchTechnique.\n\nInstances are:\n\nINVALID_KS_TECH\nBV\nHYBRID\n\nSee also: SetKeySwitchTechnique\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.PKESchemeFeature","page":"API reference","title":"OpenFHE.PKESchemeFeature","text":"PKESchemeFeature\n\nEnum type for selecting scheme features for public key encryption (PKE) in a crypto context using Enable.\n\nInstances are:\n\nPKE\nKEYSWITCH\nPRE\nLEVELDSHE\nADVANCEDSHE\nMULTIPARTY\nFHE\nSCHEMESWITCH\n\nSee also: Enable\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.Plaintext","page":"API reference","title":"OpenFHE.Plaintext","text":"Plaintext\n\nType alias for CxxWrap.StdLib.SharedPtr{PlaintextImpl}.\n\nThe plaintext object can hold unencrypted data. It is created either by encoding raw data (e.g., through MakeCKKSPackedPlaintext) or by decrypting a Ciphertext object using Decrypt.\n\nSee also: Ciphertext, Decrypt\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.PrivateKey","page":"API reference","title":"OpenFHE.PrivateKey","text":"PrivateKey{T}\n\nType alias for CxxWrap.StdLib.SharedPtr{PrivateKeyImpl{T}}.\n\nPrivate keys can be used to decrypt Ciphertext data into Plaintext objects. They are part of a KeyPair that contains both a public and a private key. Key pairs can be created from a CryptoContext by calling KeyGen.\n\nSee also: KeyGen, KeyPair\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.PublicKey","page":"API reference","title":"OpenFHE.PublicKey","text":"PublicKey{T}\n\nType alias for CxxWrap.StdLib.SharedPtr{PublicKeyImpl{T}}.\n\nPublic keys can be used to encrypt Plaintext data into Ciphertext objects. They are part of a KeyPair that contains both a public and a private key. Key pairs can be created from a CryptoContext by calling KeyGen.\n\nSee also: KeyGen, KeyPair\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.ScalingTechnique","page":"API reference","title":"OpenFHE.ScalingTechnique","text":"ScalingTechnique\n\nEnum type for selecting the scaling technique for ciphertext multiplication in a set of CCParams parameters using SetScalingTechnique.\n\nInstances are:\n\nFIXEDMANUAL\nFIXEDAUTO\nFLEXIBLEAUTO\nFLEXIBLEAUTOEXT\nNORESCALE\nINVALID_RS_TECHNIQUE\n\nSee also: SetScalingTechnique\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.SecretKeyDist","page":"API reference","title":"OpenFHE.SecretKeyDist","text":"SecretKeyDist\n\nEnum type for selecting the distribution from which the secret key is generated. To be used in a set of CCParams parameters using SetSecretKeyDist.\n\nInstances are:\n\nGAUSSIAN\nUNIFORM_TERNARY\nSPARSE_TERNARY\n\nSee also: SetSecretKeyDist\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.SecurityLevel","page":"API reference","title":"OpenFHE.SecurityLevel","text":"SecurityLevel Enum type for specifying the security level according to the homomorphic encryption standard in a set of CCParams parameters using SetSecurityLevel.\n\nInstances are:\n\nHEStd_128_classic\nHEStd_192_classic\nHEStd_256_classic\nHEStd_128_quantum\nHEStd_192_quantum\nHEStd_256_quantum\nHEStd_NotSet\n\nSee also: SetSecurityLevel\n\n\n\n\n\n","category":"type"},{"location":"reference/#OpenFHE.Clone","page":"API reference","title":"OpenFHE.Clone","text":"Clone(ciphertext::Ciphertext)\n\nClone the given ciphertext including its encrypted data.\n\nSee also: Ciphertext, CloneZero\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.CloneZero","page":"API reference","title":"OpenFHE.CloneZero","text":"CloneZero(ciphertext::Ciphertext)\n\nClone the given ciphertext without its encrypted data.\n\nSee also: Ciphertext, Clone\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.ComposedEvalMult","page":"API reference","title":"OpenFHE.ComposedEvalMult","text":"ComposedEvalMult(crypto_context::CryptoContext, ciphertext1::Ciphertext, ciphertext2::Ciphertext)\n\nMultiply ciphertext1 with ciphertext2, perform relinearization and modulus switching/rescaling. Return the resulting Ciphertext. Both input ciphertexts need to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.Decrypt-Tuple{CxxWrap.CxxWrapCore.CxxRef{OpenFHE.CryptoContextImpl{DCRTPoly}}, Any, Any, CxxWrap.CxxWrapCore.SmartPointer{<:OpenFHE.PlaintextImpl}}","page":"API reference","title":"OpenFHE.Decrypt","text":"Decrypt(crypto_context::CryptoContext, ciphertext::Ciphertext, private_key::PrivateKey, plaintext::Plaintext)\nDecrypt(crypto_context::CryptoContext, private_key::PrivateKey, ciphertext::Ciphertext, plaintext::Plaintext)\n\nDecrypt a ciphertext with the given private_key and store the result in plaintext, using the parameters of the given crypto_context.\n\nSee also: CryptoContext, PrivateKey, Ciphertext, Plaintext, Encrypt\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.Enable","page":"API reference","title":"OpenFHE.Enable","text":"Enable(crypto_context::CryptoContext, feature::PKESchemeFeature)\n\nEnable a certain public key encryption feature in the given crypto_context.\n\nSee also: CryptoContext, PKESchemeFeature\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.Encrypt","page":"API reference","title":"OpenFHE.Encrypt","text":"Encrypt(crypto_context::CryptoContext, public_key::PublicKey, plaintext::Plaintext)\n\nEncrypt a given Plaintext object into a Ciphertext using the given public_key and using the parameters of the crypto_context.\n\nSee also: CryptoContext, PublicKey, Decrypt\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalAdd","page":"API reference","title":"OpenFHE.EvalAdd","text":"EvalAdd(crypto_context::CryptoContext, ciphertext1::Ciphertext, ciphertext2::Ciphertext)\nEvalAdd(crypto_context::CryptoContext, ciphertext::Ciphertext, plaintext::Plaintext)\nEvalAdd(crypto_context::CryptoContext, plaintext::Plaintext, ciphertext::Ciphertext)\nEvalAdd(crypto_context::CryptoContext, ciphertext::Ciphertext, scalar::Real)\nEvalAdd(crypto_context::CryptoContext, scalar::Real, ciphertext::Ciphertext)\n\nAdd ciphertext1 to ciphertext2 and return the resulting Ciphertext. Both input ciphertexts need to be derived from the given crypto_context.\n\nAdd plaintext to the ciphertext and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context, while the plaintext needs to be encoded in a compatible manner\n\nAdd the real-valued scalar element-wise to ciphertext and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalBootstrap-Tuple{CxxWrap.CxxWrapCore.CxxRef{OpenFHE.CryptoContextImpl{DCRTPoly}}, Any}","page":"API reference","title":"OpenFHE.EvalBootstrap","text":"EvalBootstrap(crypto_context::CryptoContext, ciphertext::Ciphertext;\n              num_iterations = 1,\n              precision = 0)\n\nReturn a refreshed ciphertext for a given crypto_context. Supported for CKKS only. Please refer to the OpenFHE documentation for details on the remaining arguments.\n\nSee also: CryptoContext, PrivateKey, EvalBootstrapSetup, EvalBootstrap\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.EvalBootstrapKeyGen","page":"API reference","title":"OpenFHE.EvalBootstrapKeyGen","text":"EvalBootstrapKeyGen(crypto_context::CryptoContext, private_key::PrivateKey, num_slots::Integer)\n\nGenerate the necessary keys from private_key to enable bootstrapping for a given crypto_context and num_slots slots. Supported for CKKS only.\n\nSee also: CryptoContext, PrivateKey, EvalBootstrapSetup, EvalBootstrap\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalBootstrapSetup-Tuple{CxxWrap.CxxWrapCore.CxxRef{OpenFHE.CryptoContextImpl{DCRTPoly}}}","page":"API reference","title":"OpenFHE.EvalBootstrapSetup","text":"EvalBootstrapSetup(crypto_context::CryptoContext;\n                   level_budget::Vector{<:Integer} = [5, 4],\n                   dim1::Vector{<:Integer} = [0, 0],\n                   slots = 0,\n                   correction_factor = 0,\n                   precompute = true)\n\nSet up a given crypto_context for bootstrapping. Supported for CKKS only. Please refer to the OpenFHE documentation for details on the remaining arguments.\n\nSee also: CryptoContext, EvalBootstrapKeyGen, EvalBootstrap\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.EvalCos","page":"API reference","title":"OpenFHE.EvalCos","text":"EvalCos(crypto_context::CryptoContext, ciphertext::Ciphertext, a::Float64, b::Float64,\n        degree::Integer)\n\nEvaluate approximate cosine function on a given ciphertext using the Chebyshev approximation over the range ab. Return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\na is a lower bound of elements contained in the given ciphertext.\n\nb is an upper bound of elements contained in the given ciphertext.\n\ndegree is a desired degree of approximation.\n\nSupported only in CKKS.\n\nSee also: CryptoContext, Ciphertext, EvalSin\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalDivide","page":"API reference","title":"OpenFHE.EvalDivide","text":"EvalDivide(crypto_context::CryptoContext, ciphertext::Ciphertext, a::Float64, b::Float64,\n           degree::Integer)\n\nEvaluate approximate division function frac1x where x = 1 on a given ciphertext using the Chebyshev approximation over the range ab. Return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nx is an element contained in the given ciphertext\n\na is a lower bound of elements contained in the given ciphertext.\n\nb is an upper bound of elements contained in the given ciphertext.\n\ndegree is a desired degree of approximation.\n\nSupported only in CKKS.\n\nSee also: CryptoContext, Ciphertext             \n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalLogistic","page":"API reference","title":"OpenFHE.EvalLogistic","text":"EvalLogistic(crypto_context::CryptoContext, ciphertext::Ciphertext, a::Float64, b::Float64,\n             degree::Integer)\n\nEvaluate approximate logistic function frac11 + exp-x on a given ciphertext using the Chebyshev approximation over the range ab. Return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nx is an element contained in the given ciphertext\n\na is a lower bound of elements contained in the given ciphertext.\n\nb is an upper bound of elements contained in the given ciphertext.\n\ndegree is a desired degree of approximation.\n\nSupported only in CKKS.\n\nSee also: CryptoContext, Ciphertext             \n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalMult","page":"API reference","title":"OpenFHE.EvalMult","text":"EvalMult(crypto_context::CryptoContext, ciphertext1::Ciphertext, ciphertext2::Ciphertext)\nEvalMult(crypto_context::CryptoContext, ciphertext::Ciphertext, plaintext::Plaintext)\nEvalMult(crypto_context::CryptoContext, plaintext::Plaintext, ciphertext::Ciphertext)\nEvalMult(crypto_context::CryptoContext, ciphertext::Ciphertext, scalar::Real)\nEvalMult(crypto_context::CryptoContext, scalar::Real, ciphertext::Ciphertext)\n\nMultiply ciphertext1 with ciphertext2 and return the resulting Ciphertext. Both input ciphertexts need to be derived from the given crypto_context.\n\nMultiply ciphertext with the plaintext and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context, while the plaintext needs to be encoded in a compatible manner\n\nMultiply ciphertext with the real-valued scalar and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalMultKeyGen","page":"API reference","title":"OpenFHE.EvalMultKeyGen","text":"EvalMultKeyGen(crypto_context::CryptoContext, private_key::PrivateKey)\n\nGenerate relinearization key for use with EvalMult using the private_key, and store it in the  given crypto_context.\n\nSee also: CryptoContext, PrivateKey, EvalMult\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalMultNoRelin","page":"API reference","title":"OpenFHE.EvalMultNoRelin","text":"EvalMultNoRelin(crypto_context::CryptoContext, ciphertext1::Ciphertext, ciphertext2::Ciphertext)\n\nMultiply ciphertext1 with ciphertext2 without relinearization and return the resulting Ciphertext. Both input ciphertexts need to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalNegate","page":"API reference","title":"OpenFHE.EvalNegate","text":"EvalNegate(crypto_context::CryptoContext, ciphertext::Ciphertext)\n\nNegate the ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalRotate","page":"API reference","title":"OpenFHE.EvalRotate","text":"EvalRotate(crypto_context::CryptoContext, ciphertext::Ciphertext, index::Integer)\n\nRotate the ciphertext by the given index. A positive index denotes a left shift, a negative index a right shift. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalRotateKeyGen-Tuple{CxxWrap.CxxWrapCore.CxxRef{OpenFHE.CryptoContextImpl{DCRTPoly}}, Any, Vector{<:Integer}}","page":"API reference","title":"OpenFHE.EvalRotateKeyGen","text":"EvalRotateKeyGen(crypto_context::CryptoContext,\n                 private_key::PrivateKey,\n                 index_list::Vector{<:Integer};\n                 public_key::PublicKey = C_NULL)\n\nGenerate rotation keys for use with EvalRotate using the private_key and for the rotation indices in index_list. The keys are stored in the  givencrypto_context`. Please refer to the OpenFHE documentation for details on the remaining arguments.\n\nSee also: CryptoContext, PrivateKey, PublicKey, EvalRotate\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.EvalSin","page":"API reference","title":"OpenFHE.EvalSin","text":"EvalSin(crypto_context::CryptoContext, ciphertext::Ciphertext, a::Float64, b::Float64,\n        degree::Integer)\n\nEvaluate approximate sine function on a given ciphertext using the Chebyshev approximation over the range ab. Return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\na is a lower bound of elements contained in the given ciphertext.\n\nb is an upper bound of elements contained in the given ciphertext.\n\ndegree is a desired degree of approximation.\n\nSupported only in CKKS.\n\nSee also: CryptoContext, Ciphertext, EvalCos\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalSquare","page":"API reference","title":"OpenFHE.EvalSquare","text":"EvalSquare(crypto_context::CryptoContext, ciphertext::Ciphertext)\n\nPerform efficient homomorphic squaring of a ciphertext and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalSub","page":"API reference","title":"OpenFHE.EvalSub","text":"EvalSub(crypto_context::CryptoContext, ciphertext1::Ciphertext, ciphertext2::Ciphertext)\nEvalSub(crypto_context::CryptoContext, ciphertext::Ciphertext, plaintext::Plaintext)\nEvalSub(crypto_context::CryptoContext, plaintext::Plaintext, ciphertext::Ciphertext)\nEvalSub(crypto_context::CryptoContext, ciphertext::Ciphertext, scalar::Real)\nEvalSub(crypto_context::CryptoContext, scalar::Real, ciphertext::Ciphertext)\n\nSubtract ciphertext2 from ciphertext1 and return the resulting Ciphertext. Both input ciphertexts need to be derived from the given crypto_context.\n\nSubtract plaintext from ciphertext (or vice-versa) and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context, while the plaintext needs to be encoded in a compatible manner\n\nSubtract the real-valued scalar element-wise from ciphertext (or vice-versa) and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalSum","page":"API reference","title":"OpenFHE.EvalSum","text":"EvalSum(crypto_context::CryptoContext, ciphertext::Ciphertext, batch_size::Integer)\n\nCalculate sum of all elements contained in the given ciphertext and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, EvalSumKeyGen\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.EvalSumKeyGen-Tuple{CxxWrap.CxxWrapCore.CxxRef{OpenFHE.CryptoContextImpl{DCRTPoly}}, Any}","page":"API reference","title":"OpenFHE.EvalSumKeyGen","text":"EvalSumKeyGen(crypto_context::CryptoContext, private_key::PrivateKey;\n              public_key::PublicKey = C_NULL)\n\nGenerates the key map to be used by EvalSum. public_key has to be set for NTRU schemes.\n\nPlease refer to the OpenFHE documentation for more details.\n\nSee also: CryptoContext, PrivateKey, PublicKey, EvalSum\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.GenCryptoContext","page":"API reference","title":"OpenFHE.GenCryptoContext","text":"GenCryptoContext(parameters::CCParams)::CryptoContext\nGenCryptoContext(parameters::CCParams<CryptoContextCKKSRNS>)::CryptoContext<DCRTYPoly>\n\nGenerate a crypto context from a set of parameters. The exact return type depends on the parameter set type.\n\nSee also: CryptoContext, CCParams\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetBootstrapDepth-Tuple{Vector{<:Integer}, Any}","page":"API reference","title":"OpenFHE.GetBootstrapDepth","text":"GetBootstrapDepth(level_budget::Vector{<:Integer}, secret_key_distribution::SecretKeyDist)\n\nCompute and return the bootstrapping depth for a given level_budget and a secret_key_distribution.\n\nSee also: SecretKeyDist\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.GetCoefPackedValue","page":"API reference","title":"OpenFHE.GetCoefPackedValue","text":"GetCoefPackedValue(plaintext::Plaintext)::Vector{Int64}\n\nReturn data as packed coefficients for a given plaintext.\n\nNote: Only supported for schemes that encode data as packed coefficients!\n\nSee also: Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetCryptoContext-Tuple{CxxWrap.StdLib.SharedPtr{OpenFHE.CiphertextImpl{T}} where T}","page":"API reference","title":"OpenFHE.GetCryptoContext","text":"GetCryptoContext(object::Union{Ciphertext})\n\nReturn a the crypto context for a an object that is is a subtype of CryptoObject.\n\nCurrently, this is only implemented for Ciphertext.\n\nSee also: CryptoContext, Ciphertext\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.GetCyclotomicOrder","page":"API reference","title":"OpenFHE.GetCyclotomicOrder","text":"GetCyclotomicOrder(crypto_context::CryptoContext)::UInt32\n\nReturn the cyclotomic order used for a given crypto_context.\n\nSee also: CryptoContext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetElementRingDimension","page":"API reference","title":"OpenFHE.GetElementRingDimension","text":"GetElementRingDimension(plaintext::Plaintext)::UInt32\n\nReturn the ring dimension on the underlying element for a given plaintext.\n\nSee also: Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetHopLevel","page":"API reference","title":"OpenFHE.GetHopLevel","text":"GetHopLevel(ciphertext::Ciphertext)\n\nReturn the re-encryption level for the given ciphertext.\n\nSee also: Ciphertext, SetHopLevel\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetKeyGenLevel","page":"API reference","title":"OpenFHE.GetKeyGenLevel","text":"GetKeyGenLevel(crypto_context::CryptoContext)::UInt32\n\nFor future use: Return level at which evaluation keys should be generated for the given crypto_context.\n\nSee also: CryptoContext, SetKeyGenLevel\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetLevel","page":"API reference","title":"OpenFHE.GetLevel","text":"GetLevel(ciphertext::Ciphertext)\nGetLevel(plaintext::Plaintext)\n\nReturn the number of scalings performed for the given ciphertext or plaintext..\n\nSee also: Ciphertext, Plaintext, SetLevel\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetLogError","page":"API reference","title":"OpenFHE.GetLogError","text":"GetLogError(plaintext::Plaintext)\n\nReturn log2 of estimated standard deviation of approximation for a given plaintext.\n\nSee also: Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetLogPrecision","page":"API reference","title":"OpenFHE.GetLogPrecision","text":"GetLogPrecision(plaintext::Plaintext)\n\nReturn log2 of estimated precision for a given plaintext.\n\nSee also: Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetModulus","page":"API reference","title":"OpenFHE.GetModulus","text":"GetModulus(crypto_context::CryptoContext)::UInt32\n\nReturn the ciphertext modulus used for a given crypto_context.\n\nSee also: CryptoContext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetNoiseScaleDeg","page":"API reference","title":"OpenFHE.GetNoiseScaleDeg","text":"GetNoiseScaleDeg(ciphertext::Ciphertext)\nGetNoiseScaleDeg(plaintext::Plaintext)\n\nGet the degree of the scaling factor for the given ciphertext or plaintext..\n\nSee also: Ciphertext, Plaintext, SetNoiseScaleDeg\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetPackedValue","page":"API reference","title":"OpenFHE.GetPackedValue","text":"GetPackedValue(plaintext::Plaintext)::Vector{Int64}\n\nReturn data as packed value for a given plaintext.\n\nNote: Only supported for schemes that encode data as packed values!\n\nSee also: Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetRealPackedValue","page":"API reference","title":"OpenFHE.GetRealPackedValue","text":"GetRealPackedValue(plaintext::Plaintext)::Vector{Float64}\n\nReturn data as double precision values for a given plaintext.\n\nNote: Only supported for schemes that encode data as double precision values!\n\nSee also: Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetRingDimension","page":"API reference","title":"OpenFHE.GetRingDimension","text":"GetRingDimension(crypto_context::CryptoContext)::UInt32\n\nReturn the polynomial ring dimension for a given crypto_context.\n\nSee also: CryptoContext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetRootOfUnity","page":"API reference","title":"OpenFHE.GetRootOfUnity","text":"GetRootOfUnity(crypto_context::CryptoContext)::UInt32\n\nReturn the root of unity used for a given crypto_context.\n\nSee also: CryptoContext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetScalingFactor","page":"API reference","title":"OpenFHE.GetScalingFactor","text":"GetScalingFactor(ciphertext::Ciphertext)\nGetScalingFactor(plaintext::Plaintext)\n\nReturn the scaling factor for the given ciphertext or plaintext.\n\nSee also: Ciphertext, Plaintext, SetScalingFactor\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetSlots","page":"API reference","title":"OpenFHE.GetSlots","text":"GetSlots(ciphertext::Ciphertext)\nGetSlots(plaintext::Plaintext)\n\nReturn the number of slots for the given ciphertext or plaintext.\n\nSee also: Ciphertext, Plaintext, SetSlots\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.GetStringValue","page":"API reference","title":"OpenFHE.GetStringValue","text":"GetStringValue(plaintext::Plaintext)::String\n\nReturn data as string for a given plaintext.\n\nNote: Only supported for schemes that encode data as string!\n\nSee also: Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.IsEncoded","page":"API reference","title":"OpenFHE.IsEncoded","text":"IsEncoded(plaintext::Plaintext)\n\nReturn true when encoding is done for a given plaintext.\n\nSee also: Plaintext\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.KeyGen","page":"API reference","title":"OpenFHE.KeyGen","text":"KeyGen(crypto_context::CryptoContext)\n\nGenerate and return a key pair with a public and a private key for a given crypto_context.\n\nSee also: CryptoContext, KeyPair, PublicKey, PrivateKey\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.MakeCKKSPackedPlaintext-Tuple{CxxWrap.CxxWrapCore.CxxRef{OpenFHE.CryptoContextImpl{DCRTPoly}}, Vector{Float64}}","page":"API reference","title":"OpenFHE.MakeCKKSPackedPlaintext","text":"MakeCKKSPackedPlaintext(crypto_context::CryptoContext, value::Vector{Float64};\n                        scale_degree = 1,\n                        level = 1,\n                        params = C_NULL,\n                        num_slots = 0)\n\nEncode a vector of real numbers value into a CKKS-packed Plaintext using the given crypto_context. Please refer to the OpenFHE documentation for details on the remaining arguments.\n\nSee also: CryptoContext, Plaintext\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.ModReduce","page":"API reference","title":"OpenFHE.ModReduce","text":"ModReduce(crypto_context::CryptoContext, ciphertext::Ciphertext)\n\nScale down to the original scale of the ciphertext and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, Rescale, ModReduceInPlace\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.ModReduceInPlace","page":"API reference","title":"OpenFHE.ModReduceInPlace","text":"ModReduceInPlace(crypto_context::CryptoContext, ciphertext::Ciphertext)\n\nScale down to the original scale of the ciphertext in-place. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, RescaleInPlace, ModReduce\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.Relinearize","page":"API reference","title":"OpenFHE.Relinearize","text":"Relinearize(crypto_context::CryptoContext, ciphertext::Ciphertext)\n\nPerform relinearization of the ciphertext to the lowest level (with 2 polynomials per ciphertext) and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, RelinearizeInPlace\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.RelinearizeInPlace","page":"API reference","title":"OpenFHE.RelinearizeInPlace","text":"RelinearizeInPlace(crypto_context::CryptoContext, ciphertext::Ciphertext)\n\nPerform in-place relinearization of the ciphertext to the lowest level (with 2 polynomials per ciphertext). The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, Relinearize\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.Rescale","page":"API reference","title":"OpenFHE.Rescale","text":"Rescale(crypto_context::CryptoContext, ciphertext::Ciphertext)\n\nAn alias for ModReduce method. ModReduce is called Rescale in CKKS.\n\nScale down to the original scale of the ciphertext and return the resulting Ciphertext. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, ModReduce, RescaleInPlace\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.RescaleInPlace","page":"API reference","title":"OpenFHE.RescaleInPlace","text":"RescaleInPlace(crypto_context::CryptoContext, ciphertext::Ciphertext)\n\nAn alias for ModReduceInPlace method. ModReduceInPlace is called RescaleInPlace in CKKS.\n\nScale down to the original scale of the ciphertext in-place. The input ciphertext needs to be derived from the given crypto_context.\n\nSee also: CryptoContext, Ciphertext, ModReduceInPlace, Rescale\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetFirstModSize","page":"API reference","title":"OpenFHE.SetFirstModSize","text":"SetFirstModSize(parameters::CCParams, modulus::Integer)\n\nSet the first modulus for a set of parameters.\n\nSee also: SetScalingModSize\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetHopLevel","page":"API reference","title":"OpenFHE.SetHopLevel","text":"SetHopLevel(ciphertext::Ciphertext, level::Integer)\n\nSet the re-encryption level for the given ciphertext.\n\nSee also: Ciphertext, GetHopLevel\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetKeyGenLevel","page":"API reference","title":"OpenFHE.SetKeyGenLevel","text":"SetKeyGenLevel(crypto_context::CryptoContext, level::Integer)\n\nFor future use: Set level at which evaluation keys should be generated for the given crypto_context.\n\nSee also: CryptoContext, GetKeyGenLevel\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetKeySwitchTechnique","page":"API reference","title":"OpenFHE.SetKeySwitchTechnique","text":"SetKeySwitchTechnique(parameters::CCParams, technique::KeySwitchTechnique)\n\nSet the key switching technique technique for a set of parameters.\n\nSee also: KeySwitchTechnique\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetLevel","page":"API reference","title":"OpenFHE.SetLevel","text":"SetLevel(ciphertext::Ciphertext, level::Integer)\nSetLevel(plaintext::Plaintext, level::Integer)\n\nSet the number of scalings level for the given ciphertext or plaintext..\n\nSee also: Ciphertext, Plaintext, GetLevel\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetMultiplicativeDepth","page":"API reference","title":"OpenFHE.SetMultiplicativeDepth","text":"SetMultiplicativeDepth(parameters::CCParams, depth::Integer)\n\nSet the required multiplicative depth for a set of parameters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetNoiseScaleDeg","page":"API reference","title":"OpenFHE.SetNoiseScaleDeg","text":"SetNoiseScaleDeg(ciphertext::Ciphertext, degree::Integer)\nSetNoiseScaleDeg(plaintext::Plaintext, degree::Integer)\n\nSet the degree of the scaling factor for the given ciphertext or plaintext..\n\nSee also: Ciphertext, Plaintext, GetNoiseScaleDeg\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetNumLargeDigits","page":"API reference","title":"OpenFHE.SetNumLargeDigits","text":"SetNumLargeDigits(parameters::CCParams, number::Integer)\n\nSet the number of large digits for a set of parameters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetRingDim","page":"API reference","title":"OpenFHE.SetRingDim","text":"SetRingDim(parameters::CCParams, dimension::Integer)\n\nSet the polynomial ring dimension for a set of parameters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetScalingFactor","page":"API reference","title":"OpenFHE.SetScalingFactor","text":"SetScalingFactor(ciphertext::Ciphertext, factor::Real)\nSetScalingFactor(plaintext::Plaintext, factor::Real)\n\nSet the scaling factor for the given ciphertext or plaintext.\n\nSee also: Ciphertext, Plaintext, GetScalingFactor\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetScalingModSize","page":"API reference","title":"OpenFHE.SetScalingModSize","text":"SetScalingModSize(parameters::CCParams, modulus::Integer)\n\nSet the scaling modulus for a set of parameters.\n\nSee also: SetFirstModSize\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetScalingTechnique","page":"API reference","title":"OpenFHE.SetScalingTechnique","text":"SetScalingTechnique(parameters::CCParams, technique::ScalingTechnique)\n\nSet the ciphertext multiplication technique for a set of parameters.\n\nSee also: ScalingTechnique\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetSecretKeyDist","page":"API reference","title":"OpenFHE.SetSecretKeyDist","text":"SetSecretKeyDist(parameters::CCParams, distribution::SecretKeyDist)\n\nSet the distribution from which the secret key is chosen for a set of parameters.\n\nSee also: SecretKeyDist\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetSecurityLevel","page":"API reference","title":"OpenFHE.SetSecurityLevel","text":"SetSecurityLevel(parameters::CCParams, level::SecurityLevel)\n\nSet the encryption security level according to the homomogrphic encryption standard for a set of parameters.\n\nSee also: SecurityLevel\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.SetSlots","page":"API reference","title":"OpenFHE.SetSlots","text":"SetSlots(ciphertext::Ciphertext, slots::Integer)\nSetSlots(plaintext::Plaintext, slots::Integer)\n\nSet the number of slots for the given ciphertext or plaintext.\n\nSee also: Ciphertext, Plaintext, GetSlots\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.library_path-Tuple{}","page":"API reference","title":"OpenFHE.library_path","text":"OpenFHE.library_path()\n\nReturn the path of the OpenFHE-julia library that is used.\n\n\n\n\n\n","category":"method"},{"location":"reference/#OpenFHE.private_key","page":"API reference","title":"OpenFHE.private_key","text":"OpenFHE.private_key(key_pair::KeyPair)\n\nReturn the private key from a key_pair.\n\nSee also: KeyPair, public_key\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.public_key","page":"API reference","title":"OpenFHE.public_key","text":"OpenFHE.public_key(key_pair::KeyPair)\n\nReturn the public key from a key_pair.\n\nSee also: KeyPair, private_key\n\n\n\n\n\n","category":"function"},{"location":"reference/#OpenFHE.set_library!","page":"API reference","title":"OpenFHE.set_library!","text":"OpenFHE.set_library!(path = nothing; force = true)\n\nSet the absolute path to a system-provided OpenFHE-julia installation, e.g., something like /path/to/libopenfhe_julia.<ext>, where <ext> is so on Linux,dylibon macOS, anddllon Windows. Restart the Julia session after executing this function such that the changes take effect. Usingnothing` as the path will revert the library path to the default settings, i.e., the JLL-provided version of OpenFHE-julia will be used.\n\n\n\n\n\n","category":"function"},{"location":"release-management/#Release-management","page":"Release management","title":"Release management","text":"","category":"section"},{"location":"release-management/","page":"Release management","title":"Release management","text":"To create a new release for OpenFHE.jl, perform the following steps:","category":"page"},{"location":"release-management/","page":"Release management","title":"Release management","text":"Make sure that all PRs and changes that you want to go into the release are merged to main and that the latest commit on main has passed all CI tests.\nDetermine the currently released version of OpenFHE.jl, e.g., on the release page. For this manual, we will assume that the latest release was v0.2.3.\nDecide on the next version number. We follow semantic versioning, thus each version is of the form vX.Y.Z where X is the major version, Y the minor version, and Z the patch version. In this manual, we assume that the major version is always 0, thus the decision process on the new version is as follows:\nIf the new release contains breaking changes (i.e., user code might not work as before without modifications), increase the minor version by one and set the patch version to zero. In our example, the new version should thus be v0.3.0.\nIf the new release only contains minor modifications and/or bug fixes, the minor version is kept as-is and the patch version is increased by one. In our example, the new version should thus be v0.2.4.\nEdit the version string in the Project.toml and set it to the new version. Push/merge this change to main.\nGo to GitHub and add a comment to the commit that you would like to become the new release (typically this will be the commit where you just updated the version). You can comment on a commit by going to the commit overview and clicking on the title of the commit. The comment should contain the following text:\n@JuliaRegistrator register\nWait for the magic to happen! Specifically, JuliaRegistrator will create a new PR to the Julia registry with the new release information. After a grace period of ~15 minutes, this PR will be merged automatically. A short while after, TagBot will create a new release of OpenFHE.jl in our GitHub repository.\nOnce the new release has been created, the new version can be obtained through the Julia package manager as usual.\nTo make sure people do not mistake the latest state of main as the latest release, we set the version in the Project.toml to a development version. The development version should be the latest released version, with the patch version incremented by one, and the -dev suffix added. For example, if you just released v0.3.0, the new development version should be v0.3.1-dev. If you just released v0.2.4, the new development version should be v0.2.5-dev.","category":"page"},{"location":"","page":"Home","title":"Home","text":"EditURL = \"https://github.com/sloede/OpenFHE.jl/blob/main/README.md\"","category":"page"},{"location":"#OpenFHE.jl","page":"Home","title":"OpenFHE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Docs-stable) (Image: Docs-dev) (Image: Build Status) (Image: Coveralls) (Image: Codecov) (Image: License: MIT) (Image: DOI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"OpenFHE.jl is a Julia wrapper package for OpenFHE, a C++ library for fully homomorphic encryption. The C++ functionality is exposed in native Julia via the CxxWrap.jl package, using OpenFHE-julia as its backend.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: This package is work in progress and not all capabilities of OpenFHE have been translated to Julia yet. Community contributions are very welcome!","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"#Prerequisites","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have not yet installed Julia, please follow the instructions for your operating system. OpenFHE.jl works with Julia v1.8 and later on Linux and macOS platforms, and with Julia v1.9 or later on Windows platforms.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Since OpenFHE.jl is a registered Julia package, you can install it by executing the following commands in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg; Pkg.add(\"OpenFHE\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Internally, OpenFHE.jl relies on OpenFHE-julia to provide bindings for the C++ library OpenFHE. Precompiled binares for OpenFHE-julia and OpenFHE are automatically for your platform when you install OpenFHE.jl, thus there is no need to compile anything manually.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The easiest way to get started is to run one of the examples from the examples directory by includeing them in Julia, e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using OpenFHE\n\njulia> include(joinpath(pkgdir(OpenFHE), \"examples\", \"simple_real_numbers.jl\"))\nCKKS scheme is using ring dimension 16384\n\nInput x1: (0.25, 0.5, 0.75, 1, 2, 3, 4, 5,  ... ); Estimated precision: 50 bits\n\nInput x2: (5, 4, 3, 2, 1, 0.75, 0.5, 0.25,  ... ); Estimated precision: 50 bits\n\n\nResults of homomorphic computations:\nx1 = (0.25, 0.5, 0.75, 1, 2, 3, 4, 5,  ... ); Estimated precision: 43 bits\nEstimated precision in bits: 43.0\nx1 + x2 = (5.25, 4.5, 3.75, 3, 3, 3.75, 4.5, 5.25,  ... ); Estimated precision: 43 bits\nEstimated precision in bits: 43.0\nx1 - x2 = (-4.75, -3.5, -2.25, -1, 1, 2.25, 3.5, 4.75,  ... ); Estimated precision: 43 bits\n\n4 * x1 = (1, 2, 3, 4, 8, 12, 16, 20,  ... ); Estimated precision: 41 bits\n\nx1 * x2 = (1.25, 2, 2.25, 2, 2, 2.25, 2, 1.25,  ... ); Estimated precision: 41 bits\n\n\nIn rotations, very small outputs (~10^-10 here) correspond to 0's:\nx1 rotate by 1 = (0.5, 0.75, 1, 2, 3, 4, 5, 0.25,  ... ); Estimated precision: 43 bits\n\nx1 rotate by -2 = (4, 5, 0.25, 0.5, 0.75, 1, 2, 3,  ... ); Estimated precision: 43 bits","category":"page"},{"location":"#Using-a-custom-OpenFHE-julia-library","page":"Home","title":"Using a custom OpenFHE-julia library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"By default, OpenFHE.jl uses the OpenFHE-julia library provided by the openfhe_julia_jll.jl package, which is automatically obtained when installing OpenFHE.jl. Someimtes, however, it might be beneficial to instead use a system-provided OpenFHE-julia library, e.g., for development or performance purposes. You can change the default by providing a different library with the OpenFHE.set_library! function, i.e., by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using OpenFHE\n\njulia> OpenFHE.set_library!(\"/abs/path/to/library.so\")\n[ Info: Please restart Julia and reload OpenFHE.jl for the library changes to take effect","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will create a LocalPreferences.toml file in your current project directory with the libopenfhe_julia preference set accordingly. As advised, you need to restart Julia for the change to take effect. By calling set_library!() without an argument, you revert to using JLL-provided library again.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In case the custom library has been deleted, loading OpenFHE.jl will fail. In that case, either remove the LocalPreferences.toml file or manually reset the preferences by executing","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using UUIDs, Preferences\n\njulia> delete_preferences!(UUID(\"77ce9b8e-ecf5-45d1-bd8a-d31f384f2f95\"), # UUID of OpenFHE.jl\n                           \"libopenfhe_julia\"; force = true)","category":"page"},{"location":"#Transitioning-between-OpenFHE-and-OpenFHE.jl","page":"Home","title":"Transitioning between OpenFHE and OpenFHE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpenFHE.jl using CxxWrap.jl to wrap the C++ library OpenFHE for use in Julia. In general, we try to stick as close to the original library's names and conentions as possible. Since some concepts of C++ do not directly translate to Julia, however, some differences are unavoidable. The most notable one is likely that Julia does not know the concept of class member functions. CxxWrap.jl (and OpenFHE.jl) translates this to Julia functions that expect the object as its first argument. Thus, a C++ member function call","category":"page"},{"location":"","page":"Home","title":"Home","text":"my_object.member_function(arg1, arg2);","category":"page"},{"location":"","page":"Home","title":"Home","text":"will look like","category":"page"},{"location":"","page":"Home","title":"Home","text":"member_function(my_object, arg1, arg2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To simplify switching back and forth between OpenFHE.jl and the C++ library OpenFHE, OpenFHE.jl tries to use the same type and function names as OpenFHE. Since PascalCase is used for types and functions in OpenFHE, the same style is used in OpenFHE.jl, even though this is contrary to typical Julia best practices (where PascalCase is only used for types and snake_case is used for functions).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Furthermore, all OpenFHE types are wrapped by corresponding CxxWrap.jl types, which can sometimes be very verbose. To reduce clutter in the Julia REPL, OpenFHE.jl thus often uses a simpler canonical output when printing an object. For example, the output of GenCryptoContext(parameters) is an object of type CxxWrap.StdLib.SharedPtrAllocated{CryptoContextImpl{DCRTPoly}}, but when showing the object we just print SharedPtr{CryptoContext{DCRTPoly}}(). To find out the actual underlying type, use typeof.","category":"page"},{"location":"#Referencing","page":"Home","title":"Referencing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use OpenFHE.jl in your own research, please cite this repository as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{schlottkelakemper2024openfhejulia,\n  title={{O}pen{FHE}.jl: {F}ully homomorphic encryption in {J}ulia using {O}pen{FHE}},\n  author={Schlottke-Lakemper, Michael},\n  year={2024},\n  howpublished={\\url{https://github.com/sloede/OpenFHE.jl}},\n  doi={10.5281/zenodo.10460452}\n}","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpenFHE.jl was initiated by Michael Schlottke-Lakemper (RWTH Aachen University/High-Performance Computing Center Stuttgart (HLRS), Germany), who is also its principal maintainer.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Further contributions to OpenFHE.jl have been made by the following people:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Arseniy Kholod (RWTH Aachen University, Germany)","category":"page"},{"location":"#License-and-contributing","page":"Home","title":"License and contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpenFHE.jl is available under the MIT license (see License). OpenFHE itself is available under the BSD 2-Clause license.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contributions by the community are very welcome! A good start would be to compare the examples folder in OpenFHE.jl (link) and in OpenFHE (link) and to port a missing example file to OpenFHE.jl. In case some OpenFHE functionality is not yet exposed by OpenFHE-julia, it would have to be added there first.","category":"page"}]
}
